(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{182:function(t,s,a){"use strict";a.r(s);var e=a(0),n=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"v-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#v-model","aria-hidden":"true"}},[t._v("#")]),t._v(" v-model")]),t._v(" "),a("h2",{attrs:{id:"表单上绑定v-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#表单上绑定v-model","aria-hidden":"true"}},[t._v("#")]),t._v(" 表单上绑定v-model")]),t._v(" "),a("p",[t._v("我们可以在输入框上绑定v-model实现双向数据绑定")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("model"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"searchText"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("我们来分析一下这里的双向数据绑定是怎么实现的，还记得上面说组件间通信时子组件通过自定义事件向父组件通信吗？这里其实就是采用了这种形式.")]),t._v(" "),a("p",[t._v("上面的代码就等价于：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("input\n  v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"searchText"')]),t._v("\n  v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("on"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("input"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"searchText = $event.target.value"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("h2",{attrs:{id:"组件上绑定v-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#组件上绑定v-model","aria-hidden":"true"}},[t._v("#")]),t._v(" 组件上绑定v-model")]),t._v(" "),a("p",[t._v("组件上同样也可以绑定v-model，当组件上绑定v-model时，就相当于在组件上传递了一个名为"),a("code",[t._v("value")]),t._v("的props，同时绑上了一个名为"),a("code",[t._v("input")]),t._v("的自定义事件")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("custom"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("input v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("model"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"searchText"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("custom"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("input"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("custom"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("input\n  v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("value"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"searchText"')]),t._v("\n  v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("on"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("input"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"searchText = newValue"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("custom"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("input"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("同时在子组件中要通过"),a("code",[t._v("$emit")]),t._v("主动触发"),a("code",[t._v("input")]),t._v("事件")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$emit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'input'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'newValue'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[a("strong",[t._v("总结下"),a("code",[t._v("v-model")]),t._v("其实就是自定义事件用法的一个语法糖")])]),t._v(" "),a("h2",{attrs:{id:"自定义组件的-v-model"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#自定义组件的-v-model","aria-hidden":"true"}},[t._v("#")]),t._v(" 自定义组件的 v-model")]),t._v(" "),a("p",[t._v("一个组件上的 "),a("code",[t._v("v-model")]),t._v(" 默认会利用名为 "),a("code",[t._v("value")]),t._v(" 的 prop 和名为 "),a("code",[t._v("input")]),t._v(" 的事件，但是像单选框、复选框等类型的输入控件可能会将 "),a("code",[t._v("value")]),t._v(" 特性用于不同的目的，为了更好的语义化，我们想改变默认的prop名和触发事件名。model 选项可以解决这个问题：")]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Vue"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("component")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'base-checkbox'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  model"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    prop"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'checked'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认的prop变为checked，不再是value")]),t._v("\n    event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'change'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 默认的触发事件变为change，不再是input")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  props"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    checked"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Boolean\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  template"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[t._v('`\n    <input\n      type="checkbox"\n      v-bind:checked="checked"\n      v-on:change="$emit(\'change\', $event.target.checked)"\n    >\n  `')])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("checkbox v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("model"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lovingVue"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("base"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("checkbox"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),a("p",[t._v("这里的 "),a("code",[t._v("lovingVue")]),t._v(" 的值将会传入这个名为 "),a("code",[t._v("checked")]),t._v(" 的 prop。同时当 "),a("code",[t._v("<base-checkbox>")]),t._v(" 触发一个 "),a("code",[t._v("change")]),t._v(" 事件并附带一个新的值的时候，这个 "),a("code",[t._v("lovingVue")]),t._v(" 的属性将会被更新")]),t._v(" "),a("p",[t._v("注意仍然需要在组件的 "),a("code",[t._v("props")]),t._v(" 选项里声明 "),a("code",[t._v("checked")]),t._v(" 这个 prop。")]),t._v(" "),a("h2",{attrs:{id:"sync修饰符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sync修饰符","aria-hidden":"true"}},[t._v("#")]),t._v(" .sync修饰符")]),t._v(" "),a("p",[t._v("之前讲到props时说是单项数据流，但在有些情况下，我们可能需要对一个 prop 进行“双向绑定”。不幸的是，真正的双向绑定会带来维护上的问题，因为子组件可以修改父组件，且在父组件和子组件都没有明显的改动来源。")]),t._v(" "),a("p",[a("strong",[t._v("Vue推荐以 "),a("code",[t._v("update:myPropName")]),t._v(" 的模式触发事件取而代之")])]),t._v(" "),a("div",{staticClass:"language-js extra-class"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("document v"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("bind"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("title"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sync"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"doc.title"')]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("text"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("document"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 子组件通过update:myPropName形式触发更新")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("$emit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'update:title'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newTitle"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("sync修饰符实际也是自定义事件的语法糖")])])}],!1,null,null,null);s.default=n.exports}}]);