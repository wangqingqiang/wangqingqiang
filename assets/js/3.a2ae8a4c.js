(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{167:function(e,t,a){e.exports=a.p+"assets/img/lifecycle.6f2c97f0.png"},171:function(e,t,a){"use strict";a.r(t);var r=[function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"生命周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#生命周期","aria-hidden":"true"}},[e._v("#")]),e._v(" 生命周期")]),e._v(" "),r("img",{attrs:{src:a(167),width:"60%",height:"60%"}}),e._v(" "),r("h2",{attrs:{id:"beforecreate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#beforecreate","aria-hidden":"true"}},[e._v("#")]),e._v(" beforeCreate")]),e._v(" "),r("p",[e._v("在实例初始化之后，数据观测 (data observer) 和 event/watcher 事件配置之前被调用。")]),e._v(" "),r("h2",{attrs:{id:"created"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#created","aria-hidden":"true"}},[e._v("#")]),e._v(" created")]),e._v(" "),r("p",[e._v("在实例创建完成后被立即调用。在这一步，实例已完成以下的配置：数据观测 (data observer)，属性和方法的运算，watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。")]),e._v(" "),r("h2",{attrs:{id:"beforemount"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#beforemount","aria-hidden":"true"}},[e._v("#")]),e._v(" beforeMount")]),e._v(" "),r("p",[e._v("在挂载开始之前被调用：相关的 "),r("code",[e._v("render")]),e._v(" 函数首次被调用")]),e._v(" "),r("h2",{attrs:{id:"mounted"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mounted","aria-hidden":"true"}},[e._v("#")]),e._v(" mounted")]),e._v(" "),r("p",[e._v("Vue实挂载钩子，在这之后才能获取模板中DOM元素")]),e._v(" "),r("p",[e._v("注意 "),r("code",[e._v("mounted")]),e._v(" 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，可以用 "),r("code",[e._v("vm.$nextTick")])]),e._v(" "),r("h2",{attrs:{id:"beforeupdate"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#beforeupdate","aria-hidden":"true"}},[e._v("#")]),e._v(" beforeUpdate")]),e._v(" "),r("p",[e._v("数据更新时调用，发生在虚拟 DOM 打补丁之前。这里适合在更新之前访问现有的 DOM，比如手动移除已添加的事件监听器")]),e._v(" "),r("h2",{attrs:{id:"updated"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#updated","aria-hidden":"true"}},[e._v("#")]),e._v(" updated")]),e._v(" "),r("p",[e._v("由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。")]),e._v(" "),r("p",[e._v("当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态。如果要相应状态改变，通常最好使用计算属性或 watcher 取而代之。")]),e._v(" "),r("p",[e._v("注意 "),r("code",[e._v("updated")]),e._v(" 不会承诺所有的子组件也都一起被重绘。如果你希望等到整个视图都重绘完毕，可以用 "),r("code",[e._v("vm.$nextTick")]),e._v(" 替换掉 updated")]),e._v(" "),r("h2",{attrs:{id:"activated"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#activated","aria-hidden":"true"}},[e._v("#")]),e._v(" activated")]),e._v(" "),r("p",[e._v("keep-alive 组件激活时调用")]),e._v(" "),r("h2",{attrs:{id:"deactivated"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#deactivated","aria-hidden":"true"}},[e._v("#")]),e._v(" deactivated")]),e._v(" "),r("p",[e._v("keep-alive 组件停用时调用")]),e._v(" "),r("h2",{attrs:{id:"beforedestroy"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#beforedestroy","aria-hidden":"true"}},[e._v("#")]),e._v(" beforeDestroy")]),e._v(" "),r("p",[e._v("实例销毁之前调用。在这一步，实例仍然完全可用")]),e._v(" "),r("h2",{attrs:{id:"destroyed"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#destroyed","aria-hidden":"true"}},[e._v("#")]),e._v(" destroyed")]),e._v(" "),r("p",[e._v("Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁")]),e._v(" "),r("h2",{attrs:{id:"errorcaptured"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#errorcaptured","aria-hidden":"true"}},[e._v("#")]),e._v(" errorCaptured")]),e._v(" "),r("p",[e._v("类型：(err: Error, vm: Component, info: string) => ?boolean")]),e._v(" "),r("p",[e._v("当捕获一个来自子孙组件的错误时被调用。此钩子会收到三个参数：错误对象、发生错误的组件实例以及一个包含错误来源信息的字符串。此钩子可以返回 "),r("code",[e._v("false")]),e._v(" 以阻止该错误继续向上传播")])])}],d=a(0),v=Object(d.a)({},function(){this.$createElement;this._self._c;return this._m(0)},r,!1,null,null,null);t.default=v.exports}}]);